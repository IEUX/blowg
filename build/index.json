
[{"content":"","date":"27 June 2024","externalUrl":null,"permalink":"/tags/ansible/","section":"Tags","summary":"","title":"Ansible","type":"tags"},{"content":"","date":"27 June 2024","externalUrl":null,"permalink":"/tags/devops/","section":"Tags","summary":"","title":"DevOps","type":"tags"},{"content":"","date":"27 June 2024","externalUrl":null,"permalink":"/tags/docker/","section":"Tags","summary":"","title":"Docker","type":"tags"},{"content":" Introduction # When it comes to write or test Ansible playbooks itâ€™s always difficult to have a simple to use and efficient development environment.\nYour options are:\nCreate some Virtual Machines on your computer using Virtualbox, VMware Workstation, or another virtualization product, but that\u0026rsquo;s gonna be pretty slow and heavy depends on your system performances. In addition, it takes a while to go back to the initial state.\nUsing a Cloud Provider can be a good option if you have enough money however it\u0026rsquo;s not my case.\nUse a fully automate Docker compose infrastructure that initialize a complete working sandbox to write and test Ansible configuration easily.\nAt this point I assume that you are familiar with Ansible and Docker, if not I redirect you to their official website. âž­ Go to Ansible \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e Ansible icon or Docker In this tutorial we are going to learn how to create and setup a docker infrastructure for a web backend but you can adapt the number of server and their purpose for your application.\nIn this case there are:\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e Ansible icon An ansible container that will be used to configure the other container over ssh (master). A maria db database. A load-balencer runing on nginx. 2 web servers. Repository # All the source files are available on my github repository without limit of usage.\nIEUX/docker-for-ansible Dockerfile 0 0 Dockerfiles # We have here two different type of container:\nmaster, the Ansible container, it\u0026rsquo;s where we are going to connect to orchestrate and configure the others containers. server, all the container that we need to configure to host the right service. Ansible # First of all we need an Ansible image, you can search on the docker hub but all the officials images I have find was 4 or 5 years old, too old for me, so I\u0026rsquo;m going to write mine.\nFROM ubuntu:20.04 ENV ANSIBLE_VERSION 2.9.17 # Install dependencies RUN apt-get update; \\ apt-get install --fix-missing; \\ apt-get install -y gcc python3; \\ apt-get install -y python3-pip; \\ DEBIAN_FRONTEND=noninteractive; \\ apt-get install -y sshpass openssh-client; # Install ansible RUN pip3 install --upgrade pip; \\ pip3 install \u0026#34;ansible==${ANSIBLE_VERSION}\u0026#34;; \\ pip3 install ansible # Add \u0026#39;localhost\u0026#39; to the hosts RUN mkdir -p /etc/ansible \u0026amp;\u0026amp; \\ echo \u0026#39;localhost\u0026#39; \u0026gt; /etc/ansible/hosts Now we can build our custom image of Ansible.\ndocker build -t ansible-img -f ansible.Dockerfile . -t : Give a tag name to the builded image -f : Specify the Dockerfile to use Lets check out the image.\ndocker image ls Result:\nREPOSITORY TAG IMAGE ID CREATED SIZE ansible-img latest 6a6c06aebc73 4 days ago 626MB Master # For building our master image we are going to base the Dockerfile on the custom Ansible image then add our development tools like telnet and curl for debugging.\n# master.Dockerfile FROM ansible-img # Install dependencies RUN apt update \u0026amp;\u0026amp; apt install -y vim python net-tools telnet curl # Copy masters\u0026#39;s private key RUN mkdir /root/.ssh COPY ssh_keys/ansible /root/.ssh/ansible RUN chmod 0600 /root/.ssh/ansible The 3 last lines permit to copy a private rsa key, the public key will be copy on each server container allowing master container to connect over ssh to all server. The keys have to be generated before and store in the ssh_keys directory, for generating ssh keys I redirect you to this tutorial.\nIt\u0026rsquo;s important for security to change the rights on the private key once copied to remove all of them on the other users than root to prevent privilege escalation. To prevent asking to accept finger print we can add in ansible.cfg (see the project tree) the next lines :\n[defaults] host_key_checking = False Server # # server.Dockerfile FROM ubuntu:16.04 # Install dependencies RUN apt-get update \u0026amp;\u0026amp; apt-get install -y openssh-server vim python3 net-tools telnet RUN mkdir /var/run/sshd # root login RUN echo \u0026#39;root:ansible\u0026#39; | chpasswd # Authorize root login over ssh RUN sed -i \u0026#39;s/#PermitRootLogin prohibit-password/PermitRootLogin yes/\u0026#39; /etc/ssh/sshd_config RUN sed -i \u0026#39;s/PermitRootLogin prohibit-password/PermitRootLogin yes/\u0026#39; /etc/ssh/sshd_config RUN sed -i \u0026#39;s/#PasswordAuthentication yes/PasswordAuthentication yes/\u0026#39; /etc/ssh/sshd_config # SSH login fix. Otherwise user is kicked off after login RUN sed \u0026#39;s@session\\s*required\\s*pam_loginuid.so@session optional pam_loginuid.so@g\u0026#39; -i /etc/pam.d/sshd # copy master public key RUN mkdir /root/.ssh/ COPY ssh_keys/ansible.pub /root/.ssh/ansible.pub RUN cp -v /root/.ssh/ansible.pub /root/.ssh/authorized_keys # ? ENV NOTVISIBLE \u0026#34;in users profile\u0026#34; RUN echo \u0026#34;export VISIBLE=now\u0026#34; \u0026gt;\u0026gt; /etc/profile # Open ssh port EXPOSE 22 CMD [\u0026#34;/usr/sbin/sshd\u0026#34;, \u0026#34;-D\u0026#34;] How you can see the only thing that this Dockerfile is doing it\u0026rsquo;s to change the root password, install the dependencies and then wait for an ssh connection. As the goal of this project is to create a sandbox for Ansible we want our container to be as simple as possible to configure the services with playbooks.\nDocker compose # Now that we have all our Dockerfiles we can use Docker compose to start all our container by service and already configured.\n# docker-compose.yml services: master: build: context: . dockerfile: ./dockerfiles/master.Dockerfile working_dir: /root/playbooks volumes: - ./volumes/ansible/playbooks:/root/playbooks - ./volumes/ansible/config:/etc/ansible command: tail -f /dev/null web: build: context: . dockerfile: ./dockerfiles/server.Dockerfile db: build: context: . dockerfile: ./dockerfiles/server.Dockerfile lb: build: context: . dockerfile: ./dockerfiles/server.Dockerfile ports: - 8080:80 The command tail -f /dev/null on master will try to display /dev/null endlessly, it\u0026rsquo;s trick to prevent the container to shutdown itself in view that we want to log in this container with docker exec The master container use two volumes, playbooks and config, the advantage by using volumes is that you can edit the files in your standard IDE on your local system and it reflect in real time inside your container.\nFor indication the project structure should be: â”œâ”€â”€ docker-compose.yml â”œâ”€â”€ dockerfiles â”‚Â â”œâ”€â”€ ansible.Dockerfile â”‚Â â”œâ”€â”€ master.Dockerfile â”‚Â â””â”€â”€ server.Dockerfile â”œâ”€â”€ ssh_keys â”‚Â â”œâ”€â”€ ansible â”‚Â â””â”€â”€ ansible.pub â””â”€â”€ volumes â””â”€â”€ ansible â”œâ”€â”€ config â”‚Â â””â”€â”€ ansible.cfg â””â”€â”€ playbooks â”œâ”€â”€ inventory.yml â””â”€â”€ your_playbooks.yml Now that everything is setup we can run our docker compose file.\nAt the root of the project run:\ndocker compose up -d -d : Daemon mode, get back to the command line after the command If everything is good you should get this:\n[+] Running 4/4 âœ” Container docker-for-ansible-lb-1 Started 0.4s âœ” Container docker-for-ansible-web-1 Started 0.4s âœ” Container docker-for-ansible-master-1 Started 0.4s âœ” Container docker-for-ansible-db-1 Started 0.4s In the docker network create by docker compose each container as his name register in the DNS, so you can call the master container with docker-for-ansible-master-1 in this case. To shutdown the containers use:\ndocker compose down Test Orchestration # To connect as root at master use:\ndocker exec -it docker-for-ansible-master-1 bash -it : execute the command in interactive mode This command should open a shell inside the container:\nroot@a7334abf4f9e:~/playbooks# Once you have create your Ansible inventory, you can test the connection with your services.\nFor example I use this inventory\n# inventoty.yml webservers: hosts: web-1: ansible_host: docker-for-ansible-web-1 ansible_ssh_private_key_file: ~/.ssh/ansible dbservers: hosts: db: ansible_host: docker-for-ansible-db-1 ansible_ssh_private_key_file: ~/.ssh/ansible loadbalencers: hosts: lb: ansible_host: docker-for-ansible-lb-1 ansible_ssh_private_key_file: ~/.ssh/ansible all: children: webservers: dbservers: loadbalencers: This command ping each host in the inventory:\nroot@a7334abf4f9e:~/playbooks# ansible all -m ping -i inventory.yml If everything is running great you should get:\nlb | SUCCESS =\u0026gt; { \u0026#34;ansible_facts\u0026#34;: { \u0026#34;discovered_interpreter_python\u0026#34;: \u0026#34;/usr/bin/python3\u0026#34; }, \u0026#34;changed\u0026#34;: false, \u0026#34;ping\u0026#34;: \u0026#34;pong\u0026#34; } web-1 | SUCCESS =\u0026gt; { \u0026#34;ansible_facts\u0026#34;: { \u0026#34;discovered_interpreter_python\u0026#34;: \u0026#34;/usr/bin/python3\u0026#34; }, \u0026#34;changed\u0026#34;: false, \u0026#34;ping\u0026#34;: \u0026#34;pong\u0026#34; } db | SUCCESS =\u0026gt; { \u0026#34;ansible_facts\u0026#34;: { \u0026#34;discovered_interpreter_python\u0026#34;: \u0026#34;/usr/bin/python3\u0026#34; }, \u0026#34;changed\u0026#34;: false, \u0026#34;ping\u0026#34;: \u0026#34;pong\u0026#34; } Scaling # If you remember the project diagram, I said we are going to have 2 web servers but here we got only one ðŸ¤”. We could add one entry in the docker-compose.yml file but there is much better way. The flag \u0026ndash;scale of the docker compose command permit to specify the number of instance we need per services.\nIt means that in our case we can run this commande to create 2 web container or even more !\ndocker compose up -d --scale web=2 [+] Running 5/5 âœ” Container docker-for-ansible-master-1 Running 0.0s âœ” Container docker-for-ansible-lb-1 Running 0.0s âœ” Container docker-for-ansible-db-1 Running 0.0s âœ” Container docker-for-ansible-web-1 Running 0.0s âœ” Container docker-for-ansible-web-2 Started 0.4s Conclusion # You just finished to setup your lightweight Ansible development environment, of course you can adapt this process to fit your needs like the type and number of services, the base OS of your Dockerfiles or whatever you want.\nRemember that everything you are doing in the containers is not saved up when you shutdown the containers, only the volumes are register on your local system. Hope this tutorial help someone, you can contact me for feedback if needed.\n","date":"27 June 2024","externalUrl":null,"permalink":"/posts/ansible-docker/","section":"Posts","summary":"Introduction # When it comes to write or test Ansible playbooks itâ€™s always difficult to have a simple to use and efficient development environment.","title":"Docker infrastructure for Ansible playbooks development","type":"posts"},{"content":" Currently learning Start learning with me \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\r","date":"27 June 2024","externalUrl":null,"permalink":"/","section":"IEUX!'s journey","summary":"Currently learning Start learning with me \u003c?","title":"IEUX!'s journey","type":"page"},{"content":"","date":"27 June 2024","externalUrl":null,"permalink":"/posts/","section":"Posts","summary":"","title":"Posts","type":"posts"},{"content":"","date":"27 June 2024","externalUrl":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags","type":"tags"},{"content":"","date":"27 June 2024","externalUrl":null,"permalink":"/tags/tutorial/","section":"Tags","summary":"","title":"Tutorial","type":"tags"},{"content":"","date":"1 January 0001","externalUrl":null,"permalink":"/authors/","section":"Authors","summary":"","title":"Authors","type":"authors"},{"content":"","date":"1 January 0001","externalUrl":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories","type":"categories"},{"content":"","date":"1 January 0001","externalUrl":null,"permalink":"/series/","section":"Series","summary":"","title":"Series","type":"series"}]